"""Configure the Makefile.

Load the configuration variables from config.jsonc and set them in the
Makefile.
"""

from pathlib import Path

from src.competition_name.config import (
    COMPETITION_NAME,
    DEV,
    LOAD_DATA_ON_INIT,
    PYTHON_VERSION,
)

START_TAG = "# AUTOGENERATED_START"
END_TAG = "# AUTOGENERATED_END"


def set_config() -> None:
    """Set the configuration variables in the Makefile."""
    with Path("Makefile").open(mode="r+") as file:
        makefile = file.read()

        start_pos = makefile.find(START_TAG) + len(START_TAG)
        end_pos = makefile.find(END_TAG)

        configured_makefile = (
            makefile[0:start_pos] + generate_config_vars() + makefile[end_pos:]
        )

        file.seek(0)
        file.write(configured_makefile)
        file.truncate()


def generate_config_vars() -> str:
    """Generate the Makefile string for the configuration variables.

    Returns
    -------
    str
        Makefile string containing the configuration variables.
    """
    dev_config = f"\nDEV = {"true" if DEV else "false"}"
    load_data_on_init_config = (
        f"\nLOAD_DATA_ON_INIT = {"true" if LOAD_DATA_ON_INIT else "false"}"
    )
    competition_name_config = f"\nCOMPETITION_NAME = {COMPETITION_NAME}"
    python_version_config = f"\nPYTHON_VERSION = {PYTHON_VERSION}"

    config_vars = [
        dev_config,
        load_data_on_init_config,
        competition_name_config,
        python_version_config,
        "",
    ]

    return "\n".join(config_vars)


if __name__ == "__main__":
    set_config()
